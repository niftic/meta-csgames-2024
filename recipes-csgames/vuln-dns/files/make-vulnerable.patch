diff --git a/Makefile b/Makefile
index a1c63f5..2c7ec24 100644
--- a/Makefile
+++ b/Makefile
@@ -1,3 +1,3 @@
 
 all:
-	gcc -Wall main.c -o main
+	$(CC) $(CCFLAGS) $(LDFLAGS) -static -no-pie -fno-stack-protector -D_FORTIFY_SOURCE=0 main.c -o main
diff --git a/main.c b/main.c
index 3ed3176..1b105b5 100644
--- a/main.c
+++ b/main.c
@@ -10,10 +10,14 @@
 #include <string.h>
 #include <stdbool.h>
 #include <stdint.h>
+#include <ctype.h>
+#include <unistd.h>
+#include <sys/wait.h>
 
 #define BUFFER_SIZE 1500
 #define MIN(x, y) ((x) <= (y) ? (x) : (y))
 
+#define LOCAL_HOSTNAME "cai-gateway"
 
 /*
 * This software is licensed under the CC0.
@@ -155,22 +159,58 @@ struct Message {
   struct ResourceRecord *additionals;
 };
 
+static inline bool is_valid_host_char(const char c)
+{
+  return isalnum(c) || c == '.' || c == '-' || c == '_';
+}
+
+bool get_A_Record_externally(uint8_t addr[4], const char domain_name[]) {
+  FILE *fp;
+  char command[64], output[256];
+  bool success;
+
+  for (const char *p = domain_name; *p; p++)
+	{
+		if (!is_valid_host_char(*p)) return false;
+	}
+
+  /* Open the command for reading. */
+  sprintf(command, "host %s", domain_name);
+  fp = popen(command, "r");
+  if (fp == NULL) {
+    printf("Failed to run command\n" );
+    exit(1);
+  }
+
+  /* Read the first line of the output. */
+  fgets(output, sizeof(output), fp);
+
+  /* Get exit code. */
+  success = pclose(fp) == 0;
+
+  if (success) {
+    sscanf(output, "%*s has address %hhu.%hhu.%hhu.%hhu", &addr[0], &addr[1], &addr[2], &addr[3]);
+  }
+
+  return success;
+}
+
 bool get_A_Record(uint8_t addr[4], const char domain_name[])
 {
-  if (strcmp("foo.bar.com", domain_name) == 0) {
+  if (strcmp(LOCAL_HOSTNAME, domain_name) == 0) {
     addr[0] = 192;
     addr[1] = 168;
-    addr[2] = 1;
-    addr[3] = 1;
+    addr[2] = 0;
+    addr[3] = 199;
     return true;
   } else {
-    return false;
+    return get_A_Record_externally(addr, domain_name);
   }
 }
 
 bool get_AAAA_Record(uint8_t addr[16], const char domain_name[])
 {
-  if (strcmp("foo.bar.com", domain_name) == 0) {
+  if (strcmp(LOCAL_HOSTNAME, domain_name) == 0) {
     addr[0] = 0xfe;
     addr[1] = 0x80;
     addr[2] = 0x00;
@@ -195,8 +235,8 @@ bool get_AAAA_Record(uint8_t addr[16], const char domain_name[])
 
 int get_TXT_Record(char **addr, const char domain_name[])
 {
-  if (strcmp("foo.bar.com", domain_name) == 0) {
-    *addr = "abcdefg";
+  if (strcmp(LOCAL_HOSTNAME, domain_name) == 0) {
+    *addr = "Chlorophyllai";
     return 0;
   } else {
     return -1;
@@ -419,9 +459,12 @@ void encode_header(struct Message *msg, uint8_t **buffer)
 bool decode_msg(struct Message *msg, const uint8_t *buffer, size_t size)
 {
   int i;
+  uint8_t coded[1024];
 
   decode_header(msg, &buffer);
 
+  memcpy(coded, buffer, size);
+
   if (msg->anCount != 0 || msg->nsCount != 0) {
     printf("Only questions expected!\n");
     return false;
@@ -645,6 +688,7 @@ int main()
   int rc;
   ssize_t nbytes;
   int sock;
+  int status;
   int port = 9000;
 
   struct Message msg;
@@ -679,28 +723,36 @@ int main()
     if (nbytes < 0) {
       continue;
     }
-
-    /* Try to decode query */
-    if (!decode_msg(&msg, buffer, nbytes)) {
-      continue;
+    
+    /* Detach */
+    if (fork() == 0){
+      break;
     }
+    wait(&status);
+  }
 
-    /* Print query */
-    print_message(&msg);
+  /* Try to decode query */
+  if (!decode_msg(&msg, buffer, nbytes)) {
+    return 1;
+  }
 
-    /* Resolve query and put the answers into the query message */
-    resolve_query(&msg);
+  /* Print query */
+  print_message(&msg);
 
-    /* Print response */
-    print_message(&msg);
+  /* Resolve query and put the answers into the query message */
+  resolve_query(&msg);
 
-    uint8_t *p = buffer;
-    if (!encode_msg(&msg, &p)) {
-      continue;
-    }
+  /* Print response */
+  print_message(&msg);
 
-    /* Send DNS response */
-    size_t buflen = p - buffer;
-    sendto(sock, buffer, buflen, 0, (struct sockaddr*) &client_addr, addr_len);
+  uint8_t *p = buffer;
+  if (!encode_msg(&msg, &p)) {
+    return 1;
   }
+
+  /* Send DNS response */
+  size_t buflen = p - buffer;
+  sendto(sock, buffer, buflen, 0, (struct sockaddr*) &client_addr, addr_len);
+
+  return 0;
 }
